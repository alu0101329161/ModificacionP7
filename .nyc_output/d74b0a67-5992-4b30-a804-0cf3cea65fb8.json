{"/home/usuario/prueba/src/modificacion.ts":{"path":"/home/usuario/prueba/src/modificacion.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":66}},"2":{"start":{"line":20,"column":8},"end":{"line":22,"column":9}},"3":{"start":{"line":21,"column":12},"end":{"line":21,"column":59}},"4":{"start":{"line":23,"column":8},"end":{"line":23,"column":41}},"5":{"start":{"line":30,"column":8},"end":{"line":30,"column":29}},"6":{"start":{"line":37,"column":8},"end":{"line":37,"column":43}},"7":{"start":{"line":44,"column":8},"end":{"line":44,"column":55}},"8":{"start":{"line":47,"column":0},"end":{"line":47,"column":36}},"9":{"start":{"line":58,"column":8},"end":{"line":58,"column":40}},"10":{"start":{"line":66,"column":8},"end":{"line":66,"column":33}},"11":{"start":{"line":73,"column":8},"end":{"line":73,"column":33}},"12":{"start":{"line":81,"column":8},"end":{"line":81,"column":37}},"13":{"start":{"line":84,"column":0},"end":{"line":84,"column":62}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":18},"end":{"line":14,"column":21}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":29},"end":{"line":24,"column":5}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":12},"end":{"line":31,"column":5}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":16},"end":{"line":38,"column":5}},"line":36},"4":{"name":"(anonymous_4)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":19},"end":{"line":45,"column":5}},"line":43},"5":{"name":"(anonymous_5)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":25},"end":{"line":59,"column":5}},"line":57},"6":{"name":"(anonymous_6)","decl":{"start":{"line":65,"column":4},"end":{"line":65,"column":5}},"loc":{"start":{"line":65,"column":22},"end":{"line":67,"column":5}},"line":65},"7":{"name":"(anonymous_7)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":29},"end":{"line":74,"column":5}},"line":72},"8":{"name":"(anonymous_8)","decl":{"start":{"line":80,"column":4},"end":{"line":80,"column":5}},"loc":{"start":{"line":80,"column":24},"end":{"line":82,"column":5}},"line":80}},"branchMap":{"0":{"loc":{"start":{"line":20,"column":8},"end":{"line":22,"column":9}},"type":"if","locations":[{"start":{"line":20,"column":8},"end":{"line":22,"column":9}},{"start":{"line":20,"column":8},"end":{"line":22,"column":9}}],"line":20}},"s":{"0":1,"1":1,"2":3,"3":1,"4":3,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":1},"f":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0},"b":{"0":[1,2]},"inputSourceMap":{"version":3,"file":"/home/usuario/prueba/src/modificacion.ts","sources":["/home/usuario/prueba/src/modificacion.ts"],"names":[],"mappings":";;;AAAA;;;;GAIG;AACH,MAAa,YAAY;IAEvB;;;OAGG;IACH,gBAAuB,CAAC;IACxB;;;OAGG;IACI,MAAM,CAAC,eAAe;QAC3B,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE;YAC9B,YAAY,CAAC,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;SAChD;QACD,OAAO,YAAY,CAAC,YAAY,CAAC;IACnC,CAAC;IACD;;;OAGG;IACK,KAAK;QACT,OAAO,IAAI,CAAC,MAAM,EAAE,CAAA;IACxB,CAAC;IACD;;;OAGG;IACK,KAAK,CAAC,CAAS,EAAE,CAAS;QAC9B,OAAO,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IACD;;;OAGG;IACK,QAAQ,CAAC,CAAS,EAAE,CAAS;QACjC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;CACF;AAtCD,oCAsCC;AAED;;;GAGG;AACH,MAAa,yBAAyB;IAIpC;;;OAGG;IACH,YAAY,OAAuB;QACjC,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;IACD;;;;OAIG;IACH,SAAS,CAAC,MAAoB;QAC1B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,sBAAsB;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACH,CAAC,MAAM,CAAC,QAAQ,CAAC;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;IACjC,CAAC;CACF;AApCD,8DAoCC","sourcesContent":["/**\n * Clase RandomNumber siguiendo patron\n * Singleton Permite obtener numeros \n * aleatorios\n */\nexport class RandomNumber {\n  private static randomNumber: RandomNumber;\n  /**\n   * Constructor de la clase privado vacio ya que \n   * esta clase solo genera numeros aleatorios\n   */\n  private constructor() {}\n  /**\n   * Método que sigue el patrón Singelton\n   * @returns Una instancia de la clase\n   */\n  public static getRandomNumber(): RandomNumber {\n    if (!RandomNumber.randomNumber) {\n      RandomNumber.randomNumber = new RandomNumber();\n    }\n    return RandomNumber.randomNumber;\n  }\n  /**\n   * Funcion ran01\n   * @returns Un número aleatorio en punto flotante generado en el rango [0, 1].\n   */\n   public ran01(){\n      return Math.random()\n  }\n  /**\n   * Funcion ranNM\n   * @returns Un número aleatorio en punto flotante generado en el rango [n, m], donde n y m son parámetros del método correspondiente.\n   */\n   public ranNM(n :number, m :number){\n      return Math.random() * (m-n) + n;\n  }\n  /**\n   * Funcion intRanNM\n   * @returns Un número aleatorio entero generado en el rango [n, m], donde n y m son parámetros del método correspondiente.\n   */\n   public intRanNM(n :number, m :number){\n      return Math.floor(Math.random() * (m-n)) + n;\n  }\n}\n\n/**\n * Clase iterable que devuelve una coleccion e\n * implementa una interfaz iterable de RandomNumber\n */\nexport class RandomNumberSetCollection implements Iterable<RandomNumber> {\n\n  private numeros: Set<RandomNumber>;\n\n  /**\n   * Constructor\n   * @param numeros conjunto de numeros aleatorios\n   */\n  constructor(numeros: RandomNumber[]) {\n    this.numeros = new Set(numeros);\n  }\n  /**\n   * Funcion addNumero.\n   * Añade un numero al conjunto\n   * @param numero numero a añadir\n   */\n  addNumero(numero :RandomNumber) {\n      this.numeros.add(numero);\n  }\n  \n  /**\n   * Funcion getCantidadDeElementos.\n   * @returns tamaño del conjunto\n   */\n  getCantidadDeElementos() {\n      return this.numeros.size;\n  }\n  \n  /**\n   * Iterador.\n   * Recorre el conjunto\n   * @returns valores del conjunto\n   */\n  [Symbol.iterator](): Iterator<RandomNumber> {\n      return this.numeros.values();\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cc89a0228e53b2ace593b8a05539809d954173fd","contentHash":"d981da8220f1c6e1658d7283cb022f62e435fabb90f2c32f760ed63fe4c7d40a"}}